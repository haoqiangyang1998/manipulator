// python -m grpc_tools.protoc -I=./ --python_out=./rpc_package --grpc_python_out=./rpc_package ./data.proto
syntax = "proto3";

package rpc_package;
// 心跳
service HeartbeatService {
  rpc HeartBeat (CommonRequest) returns (CommonReply) {}
}

message CommonRequest {
  int32 signal = 1;
}

message CommonReply {
  int32 signal = 1;
}

service ResetService {
  rpc get_reset_param (CommonRequest) returns (ResetReply) {}
}

message ResetReply{
  int32 worker_id = 1;
  repeated string learner_address = 2;
}

// 用于Learner向Actor发送初始化参数
service SamplerInitParamService {
  rpc get_init_param (CommonRequest) returns (SamplerInitParamReply) {}
}

message SamplerInitParamReply {
  float gamma = 1;
  float tau = 2;
  int32 action_dim = 3;
  int32 state_dim = 4;
  int32 traj_len = 5;
  int32 n_sample = 6;
  int32 player_id = 7;
  int32 time_stamp =8;
  int32 hidden_dim = 9;
  int32 p2p_learner2sampler = 10;
  int32 p2p_league2sampler = 11;
  string dragonfly_node = 12;
  int32 use_done_mask = 13;
  int32 sample_mode_agent = 14;
  int32 sample_mode_bot = 15;
  int32 enable_inverse = 16;
  int32 latest_sp = 17;
}

// 用于Learner向Actor发送模型结构
service SamplerInitModelService {
  rpc get_init_model (CommonRequest) returns (SamplerInitModelReply) {}
}

// 模型pt文件
message SamplerInitModelReply {
  bytes pnet_data = 1;
  bytes vnet_data = 2;
}

// 用于Learner向Actor发送模型参数
service Sampler2LearnerModelService {
  rpc get_model (Sampler2LearnerModelRequest) returns (Sampler2LearnerModelReply) {}
}

message Sampler2LearnerModelRequest {
  int32 learner_index = 1;
  int32 actor_index = 2;
  int32 time_stamp = 3;
}

message Sampler2LearnerModelReply {
  int32 model_reset = 1;
  int32 time_stamp = 2;
  bytes data = 3;
  string url = 4;
}

// 用于Actor向learner发送采样数据
service SamplerDataService {
  rpc send_data (SamplerDataRequest) returns (CommonReply) {}
}

message SamplerDataRequest {
  int32 worker_id = 1;
  int32 time_stamp = 2;
  bytes compressed_data = 3;
}

// 用于Actor向Coordinator发送对局结果
service SamplerResultService {
  rpc send_result (SamplerResultRequest) returns (CommonReply) {}
}

message SamplerResultRequest {
  // results 存放当前采样数据包含的所有完整局的结果
  repeated float results = 1;
  repeated float rewards = 2;
  int32 red_index = 3;
  int32 blue_index = 4;
  int32 n_eps = 5;
}

service Sampler2LeagueModelService{
  rpc get_model (Sampler2LeagueModelRequest) returns (Sampler2LeagueModelReply) {}
}

message Sampler2LeagueModelRequest {
  int32 learner_index = 1;
  int32 actor_index = 2;
}

message Sampler2LeagueModelReply {
  int32 model_reset = 1;
  int32 opponent_id = 2;
  bytes data = 3;
  string url = 4;
  int32 time_stamp = 5;
}

// 用于Learner向Coordinator获取Agent初始模型参数
service LearnerInitService{
  rpc get_init_model (CommonRequest) returns (LearnerInitReply) {}
}

message LearnerInitReply{
  int32 agent_index = 1;
  bytes data = 2;
  int32 model_update_freq = 3;
}

service LearnerUploadParamService {
  rpc upload_param (LearnerUploadParamRequest) returns (CommonReply) {}
}

message LearnerUploadParamRequest{
  float lr = 1;
}

// 用于Learner向Coordinator更新模型
service Learner2LeagueUpdateService {
  rpc update_model (Learner2LeagueUpdateRequest) returns (CommonReply) {}
}

message Learner2LeagueUpdateRequest{
  int32 time_stamp = 1;
  int32 agent_index = 2;
  int32 agent_step = 3;
  bytes data = 4;
  repeated float gpu_utils = 5;
  repeated float iter_utils = 6;
  repeated float ent_loss = 7;
}

service EvalInitService {
  rpc get_init_param (CommonRequest) returns (EvalInitReply) {}
}

message EvalInitReply {
  int32 eval_times = 1;
  int32 eval_mode_agent = 2;
  int32 eval_mode_bot = 3;
  int32 p2p_league2eval = 4;
  string dragonfly_node = 5;
  bytes pnet_data = 6;
  bytes vnet_data = 7;
}

service EvalModelService {
  rpc get_model (CommonRequest) returns (EvalModelReply) {}
}

message EvalModelReply {
  int32 red_id = 1;
  int32 blue_id = 2;
  string red_model_file = 3;
  string blue_model_file = 4;
  bytes red_model = 5;
  bytes blue_model = 6;
  int32 red_is_bot = 7;
  int32 blue_is_bot = 8;
}

service EvalResultService {
  rpc send_result (EvalResultRequest) returns (CommonReply) {}
}

message EvalResultRequest {
  int32 red_id = 1;
  int32 blue_id = 2;
  repeated float results = 3;
  repeated float rewards = 4;
}

message ArrayData {
  bytes data = 1;
  repeated int32 shape = 2;
  string dtype = 3;
}

message SampleData {
  int32 num_sample = 1;
  repeated ArrayData array = 2;
}

// 用于添加player至player_pool
service AddPlayerService {
  rpc add_player (AddPlayerRequest) returns (CommonReply) {}
}

message AddPlayerRequest{
  string nickname = 1;
  bytes model = 2;
}

service SleepService {
  rpc sleep_cmd (CommonRequest) returns (CommonReply) {}
}