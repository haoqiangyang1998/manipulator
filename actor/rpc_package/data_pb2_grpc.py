# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc_package.data_pb2 as data__pb2


class HeartbeatServiceStub(object):
    """心跳
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HeartBeat = channel.unary_unary(
                '/rpc_package.HeartbeatService/HeartBeat',
                request_serializer=data__pb2.CommonRequest.SerializeToString,
                response_deserializer=data__pb2.CommonReply.FromString,
                )


class HeartbeatServiceServicer(object):
    """心跳
    """

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeartbeatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=data__pb2.CommonRequest.FromString,
                    response_serializer=data__pb2.CommonReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.HeartbeatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HeartbeatService(object):
    """心跳
    """

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.HeartbeatService/HeartBeat',
            data__pb2.CommonRequest.SerializeToString,
            data__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ResetServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_reset_param = channel.unary_unary(
                '/rpc_package.ResetService/get_reset_param',
                request_serializer=data__pb2.CommonRequest.SerializeToString,
                response_deserializer=data__pb2.ResetReply.FromString,
                )


class ResetServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_reset_param(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_reset_param': grpc.unary_unary_rpc_method_handler(
                    servicer.get_reset_param,
                    request_deserializer=data__pb2.CommonRequest.FromString,
                    response_serializer=data__pb2.ResetReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.ResetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResetService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_reset_param(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.ResetService/get_reset_param',
            data__pb2.CommonRequest.SerializeToString,
            data__pb2.ResetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SamplerInitParamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_init_param = channel.unary_unary(
                '/rpc_package.SamplerInitParamService/get_init_param',
                request_serializer=data__pb2.CommonRequest.SerializeToString,
                response_deserializer=data__pb2.SamplerInitParamReply.FromString,
                )


class SamplerInitParamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_init_param(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SamplerInitParamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_init_param': grpc.unary_unary_rpc_method_handler(
                    servicer.get_init_param,
                    request_deserializer=data__pb2.CommonRequest.FromString,
                    response_serializer=data__pb2.SamplerInitParamReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.SamplerInitParamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SamplerInitParamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_init_param(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.SamplerInitParamService/get_init_param',
            data__pb2.CommonRequest.SerializeToString,
            data__pb2.SamplerInitParamReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Sampler2LearnerModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_model = channel.unary_unary(
                '/rpc_package.Sampler2LearnerModelService/get_model',
                request_serializer=data__pb2.Sampler2LearnerModelRequest.SerializeToString,
                response_deserializer=data__pb2.Sampler2LearnerModelReply.FromString,
                )


class Sampler2LearnerModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Sampler2LearnerModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_model': grpc.unary_unary_rpc_method_handler(
                    servicer.get_model,
                    request_deserializer=data__pb2.Sampler2LearnerModelRequest.FromString,
                    response_serializer=data__pb2.Sampler2LearnerModelReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.Sampler2LearnerModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sampler2LearnerModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Sampler2LearnerModelService/get_model',
            data__pb2.Sampler2LearnerModelRequest.SerializeToString,
            data__pb2.Sampler2LearnerModelReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SamplerDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_data = channel.unary_unary(
                '/rpc_package.SamplerDataService/send_data',
                request_serializer=data__pb2.SamplerDataRequest.SerializeToString,
                response_deserializer=data__pb2.CommonReply.FromString,
                )


class SamplerDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def send_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SamplerDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_data': grpc.unary_unary_rpc_method_handler(
                    servicer.send_data,
                    request_deserializer=data__pb2.SamplerDataRequest.FromString,
                    response_serializer=data__pb2.CommonReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.SamplerDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SamplerDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def send_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.SamplerDataService/send_data',
            data__pb2.SamplerDataRequest.SerializeToString,
            data__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SamplerResultServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_result = channel.unary_unary(
                '/rpc_package.SamplerResultService/send_result',
                request_serializer=data__pb2.SamplerResultRequest.SerializeToString,
                response_deserializer=data__pb2.CommonReply.FromString,
                )


class SamplerResultServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def send_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SamplerResultServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_result': grpc.unary_unary_rpc_method_handler(
                    servicer.send_result,
                    request_deserializer=data__pb2.SamplerResultRequest.FromString,
                    response_serializer=data__pb2.CommonReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.SamplerResultService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SamplerResultService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def send_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.SamplerResultService/send_result',
            data__pb2.SamplerResultRequest.SerializeToString,
            data__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
